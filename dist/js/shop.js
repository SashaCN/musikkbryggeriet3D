let line=document.querySelector(".js-slider-line"),arrRightMain=document.querySelector(".js-arrow-right"),arrLeftMain=document.querySelector(".js-arrow-left"),objects=document.querySelectorAll(".js-slider-object"),objectWidth=objects[0].getBoundingClientRect().width,lineWidth=Math.round(line.getBoundingClientRect().width),mainImg=document.querySelectorAll(".js-slider-object img"),lineS=document.querySelector(".additional-photo"),innerStringImg="",basketButton=document.querySelector(".basket"),basketPopup=document.querySelector(".basket-popup");if(objects.length>1){for(let e=0;e<mainImg.length;e++)innerStringImg=`${innerStringImg}${mainImg[e].outerHTML}`,mainImg[e].dataset.imgNumber=e;lineS.innerHTML=innerStringImg;let e=document.querySelector(".switch-arrow-right"),t=document.querySelector(".switch-arrow-left"),i=Math.round(lineS.getBoundingClientRect().width),n=document.querySelectorAll(".additional-photo img"),l=n[1].getBoundingClientRect().width;for(let e=0;e<n.length;e++)n[e].dataset.switchNumber=e;if(n.length<=3&&(e.style.opacity="0",t.style.opacity="0",2==n.length))for(let e=0;e<n.length;e++)n[e].style.width="45%";function leftS(e){lineLeft(e,lineS,l)}function rightS(e){lineRight(e,lineS,i,l)}t.onclick=leftS,e.onclick=rightS,t.ondblclick=falseS,e.ondblclick=falseS,n.forEach(e=>{e.onclick=()=>{console.log(objects[e.getAttribute("data-switch-number")].offsetLeft),line.scrollTo(objects[e.getAttribute("data-switch-number")].scrollWidth*e.getAttribute("data-switch-number"),0)}})}else arrRightMain.style.display="none",arrLeftMain.style.display="none",document.querySelector(".switch-slider-line").style.display="none",line.style.display="inline-block",line.classList.add("alone-img");function left(e){lineLeft(e,line,objectWidth)}function right(e){lineRight(e,line,lineWidth,objectWidth)}function basketOpen(e){popupOpen(e,basketPopup)}arrLeftMain.onclick=left,arrRightMain.onclick=right,arrLeftMain.ondblclick=falseS,arrRightMain.ondblclick=falseS,basketButton.onclick=basketOpen;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3AuanMiXSwibmFtZXMiOlsibGluZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFyclJpZ2h0TWFpbiIsImFyckxlZnRNYWluIiwib2JqZWN0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvYmplY3RXaWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwibGluZVdpZHRoIiwiTWF0aCIsInJvdW5kIiwibWFpbkltZyIsImxpbmVTIiwiaW5uZXJTdHJpbmdJbWciLCJiYXNrZXRCdXR0b24iLCJiYXNrZXRQb3B1cCIsImxlbmd0aCIsImkiLCJvdXRlckhUTUwiLCJkYXRhc2V0IiwiaW1nTnVtYmVyIiwiaW5uZXJIVE1MIiwiYXJyUmlnaHRTIiwiYXJyTGVmdFMiLCJsaW5lU1dpZHRoIiwic3dpdGNoZXMiLCJzd2l0Y2hXaWR0aCIsInN3aXRjaE51bWJlciIsInN0eWxlIiwib3BhY2l0eSIsImxlZnRTIiwiZXZlbnQiLCJsaW5lTGVmdCIsInJpZ2h0UyIsImxpbmVSaWdodCIsIm9uY2xpY2siLCJvbmRibGNsaWNrIiwiZmFsc2VTIiwiZm9yRWFjaCIsImVsZW0iLCJjb25zb2xlIiwibG9nIiwiZ2V0QXR0cmlidXRlIiwib2Zmc2V0TGVmdCIsInNjcm9sbFRvIiwic2Nyb2xsV2lkdGgiLCJkaXNwbGF5IiwiY2xhc3NMaXN0IiwiYWRkIiwibGVmdCIsInJpZ2h0IiwiYmFza2V0T3BlbiIsInBvcHVwT3BlbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBT0MsU0FBU0MsY0FBYyxtQkFDOUJDLGFBQWVGLFNBQVNDLGNBQWMsbUJBQ3RDRSxZQUFjSCxTQUFTQyxjQUFjLGtCQUNyQ0csUUFBVUosU0FBU0ssaUJBQWlCLHFCQUNwQ0MsWUFBY0YsUUFBUSxHQUFHRyx3QkFBd0JDLE1BQ2pEQyxVQUFZQyxLQUFLQyxNQUFNWixLQUFLUSx3QkFBd0JDLE9BQ3BESSxRQUFVWixTQUFTSyxpQkFBaUIseUJBRXBDUSxNQUFRYixTQUFTQyxjQUFjLHFCQUMvQmEsZUFBaUIsR0FFakJDLGFBQWVmLFNBQVNDLGNBQWMsV0FDdENlLFlBQWNoQixTQUFTQyxjQUFjLGlCQUV6QyxHQUFHRyxRQUFRYSxPQUFTLEVBQUUsQ0FDcEIsSUFBSSxJQUFJQyxFQUFJLEVBQUdBLEVBQUlOLFFBQVFLLE9BQVFDLElBQ2pDSixlQUFpQixHQUFHQSxpQkFBaUJGLFFBQVFNLEdBQUdDLFlBQ2hEUCxRQUFRTSxHQUFHRSxRQUFRQyxVQUFZSCxFQUdqQ0wsTUFBTVMsVUFBWVIsZUFFbEIsSUFBSVMsRUFBWXZCLFNBQVNDLGNBQWMsdUJBQ25DdUIsRUFBV3hCLFNBQVNDLGNBQWMsc0JBQ2xDd0IsRUFBYWYsS0FBS0MsTUFBTUUsTUFBTU4sd0JBQXdCQyxPQUN0RGtCLEVBQVcxQixTQUFTSyxpQkFBaUIseUJBQ3JDc0IsRUFBY0QsRUFBUyxHQUFHbkIsd0JBQXdCQyxNQUV0RCxJQUFJLElBQUlVLEVBQUksRUFBR0EsRUFBSVEsRUFBU1QsT0FBUUMsSUFDbENRLEVBQVNSLEdBQUdFLFFBQVFRLGFBQWVWLEVBR3JDLEdBQUdRLEVBQVNULFFBQVUsSUFDcEJNLEVBQVVNLE1BQU1DLFFBQVUsSUFDMUJOLEVBQVNLLE1BQU1DLFFBQVUsSUFDSCxHQUFuQkosRUFBU1QsUUFDVixJQUFJLElBQUlDLEVBQUksRUFBR0EsRUFBSVEsRUFBU1QsT0FBUUMsSUFDbENRLEVBQVNSLEdBQUdXLE1BQU1yQixNQUFRLE1BVWhDLFNBQVN1QixNQUFPQyxHQUNkQyxTQUFTRCxFQUFPbkIsTUFBT2MsR0FHekIsU0FBU08sT0FBUUYsR0FDZkcsVUFBVUgsRUFBT25CLE1BQU9ZLEVBQVlFLEdBVnRDSCxFQUFTWSxRQUFVTCxNQUNuQlIsRUFBVWEsUUFBVUYsT0FDcEJWLEVBQVNhLFdBQWFDLE9BQ3RCZixFQUFVYyxXQUFhQyxPQVV2QlosRUFBU2EsUUFBU0MsSUFDaEJBLEVBQUtKLFFBQVUsS0FDYkssUUFBUUMsSUFBSXRDLFFBQVFvQyxFQUFLRyxhQUFhLHVCQUF1QkMsWUFDN0Q3QyxLQUFLOEMsU0FBU3pDLFFBQVFvQyxFQUFLRyxhQUFhLHVCQUF1QkcsWUFBY04sRUFBS0csYUFBYSxzQkFBdUIsV0FJMUh6QyxhQUFhMkIsTUFBTWtCLFFBQVUsT0FDN0I1QyxZQUFZMEIsTUFBTWtCLFFBQVUsT0FDNUIvQyxTQUFTQyxjQUFjLHVCQUF1QjRCLE1BQU1rQixRQUFVLE9BQzlEaEQsS0FBSzhCLE1BQU1rQixRQUFVLGVBQ3JCaEQsS0FBS2lELFVBQVVDLElBQUksYUFVckIsU0FBU0MsS0FBTWxCLEdBQ2JDLFNBQVNELEVBQU9qQyxLQUFNTyxhQUd4QixTQUFTNkMsTUFBT25CLEdBQ2RHLFVBQVVILEVBQU9qQyxLQUFNVSxVQUFXSCxhQU1wQyxTQUFTOEMsV0FBWXBCLEdBQ25CcUIsVUFBV3JCLEVBQU9oQixhQWpCcEJiLFlBQVlpQyxRQUFVYyxLQUN0QmhELGFBQWFrQyxRQUFVZSxNQUN2QmhELFlBQVlrQyxXQUFhQyxPQUN6QnBDLGFBQWFtQyxXQUFhQyxPQVcxQnZCLGFBQWFxQixRQUFVZ0IiLCJmaWxlIjoic2hvcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBsaW5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1zbGlkZXItbGluZVwiKSxcclxuICAgIGFyclJpZ2h0TWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXJyb3ctcmlnaHRcIiksXHJcbiAgICBhcnJMZWZ0TWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXJyb3ctbGVmdFwiKSxcclxuICAgIG9iamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXNsaWRlci1vYmplY3RcIiksXHJcbiAgICBvYmplY3RXaWR0aCA9IG9iamVjdHNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXHJcbiAgICBsaW5lV2lkdGggPSBNYXRoLnJvdW5kKGxpbmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpLFxyXG4gICAgbWFpbkltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtc2xpZGVyLW9iamVjdCBpbWdcIiksXHJcbiAgICAvL3N3aXRjaGVzIChTKVxyXG4gICAgbGluZVMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZGl0aW9uYWwtcGhvdG9cIiksXHJcbiAgICBpbm5lclN0cmluZ0ltZyA9IFwiXCIsXHJcbiAgICAvL2Jhc2tldCBwb3B1cCBcclxuICAgIGJhc2tldEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYmFza2V0XCIpLFxyXG4gICAgYmFza2V0UG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJhc2tldC1wb3B1cFwiKVxyXG5cclxuaWYob2JqZWN0cy5sZW5ndGggPiAxKXtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgbWFpbkltZy5sZW5ndGg7IGkrKyl7XHJcbiAgICBpbm5lclN0cmluZ0ltZyA9IGAke2lubmVyU3RyaW5nSW1nfSR7bWFpbkltZ1tpXS5vdXRlckhUTUx9YFxyXG4gICAgbWFpbkltZ1tpXS5kYXRhc2V0LmltZ051bWJlciA9IGlcclxuICB9XHJcbiAgXHJcbiAgbGluZVMuaW5uZXJIVE1MID0gaW5uZXJTdHJpbmdJbWdcclxuICBcclxuICBsZXQgYXJyUmlnaHRTID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zd2l0Y2gtYXJyb3ctcmlnaHRcIiksXHJcbiAgICAgIGFyckxlZnRTID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zd2l0Y2gtYXJyb3ctbGVmdFwiKSxcclxuICAgICAgbGluZVNXaWR0aCA9IE1hdGgucm91bmQobGluZVMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpLFxyXG4gICAgICBzd2l0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWRkaXRpb25hbC1waG90byBpbWdcIiksXHJcbiAgICAgIHN3aXRjaFdpZHRoID0gc3dpdGNoZXNbMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcclxuICBcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgc3dpdGNoZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgc3dpdGNoZXNbaV0uZGF0YXNldC5zd2l0Y2hOdW1iZXIgPSBpXHJcbiAgfVxyXG5cclxuICBpZihzd2l0Y2hlcy5sZW5ndGggPD0gMyl7XHJcbiAgICBhcnJSaWdodFMuc3R5bGUub3BhY2l0eSA9IFwiMFwiXHJcbiAgICBhcnJMZWZ0Uy5zdHlsZS5vcGFjaXR5ID0gXCIwXCJcclxuICAgIGlmKHN3aXRjaGVzLmxlbmd0aCA9PSAyKXtcclxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHN3aXRjaGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBzd2l0Y2hlc1tpXS5zdHlsZS53aWR0aCA9IFwiNDUlXCJcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXJyTGVmdFMub25jbGljayA9IGxlZnRTXHJcbiAgYXJyUmlnaHRTLm9uY2xpY2sgPSByaWdodFNcclxuICBhcnJMZWZ0Uy5vbmRibGNsaWNrID0gZmFsc2VTXHJcbiAgYXJyUmlnaHRTLm9uZGJsY2xpY2sgPSBmYWxzZVNcclxuXHJcbiAgZnVuY3Rpb24gbGVmdFMgKGV2ZW50KXtcclxuICAgIGxpbmVMZWZ0KGV2ZW50LCBsaW5lUywgc3dpdGNoV2lkdGgpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByaWdodFMgKGV2ZW50KXtcclxuICAgIGxpbmVSaWdodChldmVudCwgbGluZVMsIGxpbmVTV2lkdGgsIHN3aXRjaFdpZHRoKVxyXG4gIH1cclxuXHJcbiAgc3dpdGNoZXMuZm9yRWFjaCgoZWxlbSk9PntcclxuICAgIGVsZW0ub25jbGljayA9ICgpPT57XHJcbiAgICAgIGNvbnNvbGUubG9nKG9iamVjdHNbZWxlbS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXRjaC1udW1iZXJcIildLm9mZnNldExlZnQpXHJcbiAgICAgIGxpbmUuc2Nyb2xsVG8ob2JqZWN0c1tlbGVtLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpdGNoLW51bWJlclwiKV0uc2Nyb2xsV2lkdGggKiBlbGVtLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpdGNoLW51bWJlclwiKSwgMClcclxuICAgIH1cclxuICB9KVxyXG59ZWxzZXtcclxuICBhcnJSaWdodE1haW4uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgYXJyTGVmdE1haW4uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zd2l0Y2gtc2xpZGVyLWxpbmVcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgbGluZS5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxyXG4gIGxpbmUuY2xhc3NMaXN0LmFkZChcImFsb25lLWltZ1wiKVxyXG59XHJcblxyXG4vL3NsaWRlclxyXG5cclxuYXJyTGVmdE1haW4ub25jbGljayA9IGxlZnRcclxuYXJyUmlnaHRNYWluLm9uY2xpY2sgPSByaWdodFxyXG5hcnJMZWZ0TWFpbi5vbmRibGNsaWNrID0gZmFsc2VTXHJcbmFyclJpZ2h0TWFpbi5vbmRibGNsaWNrID0gZmFsc2VTXHJcblxyXG5mdW5jdGlvbiBsZWZ0IChldmVudCl7XHJcbiAgbGluZUxlZnQoZXZlbnQsIGxpbmUsIG9iamVjdFdpZHRoKVxyXG59XHJcblxyXG5mdW5jdGlvbiByaWdodCAoZXZlbnQpe1xyXG4gIGxpbmVSaWdodChldmVudCwgbGluZSwgbGluZVdpZHRoLCBvYmplY3RXaWR0aClcclxufVxyXG5cclxuLy9iYXNrZXQgcG9wdXAgXHJcbmJhc2tldEJ1dHRvbi5vbmNsaWNrID0gYmFza2V0T3BlblxyXG5cclxuZnVuY3Rpb24gYmFza2V0T3BlbiAoZXZlbnQpe1xyXG4gIHBvcHVwT3BlbiAoZXZlbnQsIGJhc2tldFBvcHVwKVxyXG59Il19
